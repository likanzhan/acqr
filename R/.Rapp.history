Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1))   	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1))   	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, label = bquote("Middle" ~ .(100 - alpha * 100) ~~ "% of" ~~ italic(t) ~~ "distribution"))	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, label = bquote("Middle" ~ .(100 - alpha_level * 100) ~~ "% of" ~~ italic(t) ~~ "distribution"))	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
?text
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 2, #
   label = bquote("Middle" ~ .(100 - alpha_level * 100) ~~ "% of" ~~ italic(t) ~~ "distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, #
   label = bquote("Middle" ~ .(100 - alpha_level * 100) ~~ "% of" ~~ italic(t) ~~ "distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~~"% of"~~italic(t)~~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
?text
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, adj = 0.5,#
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, padj = 0.5,#
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, pos = 3, adj = 5,#
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
?text
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = 0.1, pos = 3,#
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 4, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 5, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 6, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 8, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 10, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=T, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 10, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2, at = c(0, max_y + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(2, at = seq(0, max_y, by = 0.1), lwd = 0, lwd.ticks = 1)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 10, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2, at = c(0, max_y + 0.2), labels = c("", ""), lwd.ticks = 0)#
 axis(2, at = seq(0, max_y, by = 0.1), lwd = 0, lwd.ticks = 1)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "density")#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 10, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2, at = c(0, max_y + 0.2), labels = c("", ""), lwd.ticks = 0)#
 axis(2, at = seq(0, max_y + 0.1, by = 0.1), lwd = 0, lwd.ticks = 1)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
Plot_t_Distribution <- function (#
n = 3,#
alpha_level = 0.05,#
sigma_range = 6,#
two_tails = TRUE,#
show_critical_region = FALSE, #
fill_critical_region = TRUE, #
fill_confidence_interval = FALSE,#
show_normal_curve = TRUE#
){#
 ##### 1. Colors used in the plotting#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
#
 zcolor <- "#008744" #ggsci::pal_aaas("default")(10)[2]#
 tcolor <- "#d62d20" #ggsci::pal_aaas("default")(10)[3]#
#
 ##### 2. Calculate the relevant values for the plotting#
 x_value <- seq(- sigma_range, sigma_range, by = 0.01) #
 alpha_value <- ifelse(two_tails, alpha_level / 2, alpha_level)#
 t_value <- qt(p = alpha_value, df = n - 1, lower.tail = FALSE)#
 z_value <- qnorm(p = alpha_value, lower.tail = FALSE)#
 tvalue <- formatC(t_value, digits = 6, format = "f")#
 zvalue <- formatC(z_value, digits = 6, format = "f")#
#
 y_value_z <- dnorm(x_value)#
 y_value_t <- dt(x_value, df = n - 1)#
 max_y <- max(y_value_z)#
#
 # calculate critical region ##
 polygon_right_x <- c(t_value,   x_value[x_value >= t_value],              max(x_value))#
 polygon_right_y <- c(0,      dt(x_value[x_value >= t_value], df = n - 1), 0           )#
 # calculate confidence interval#
 polygon_between_x <- c(-t_value,    x_value[x_value >= - t_value & x_value <= t_value],             t_value)#
 polygon_between_y <- c(0       , dt(x_value[x_value >= - t_value & x_value <= t_value], df = n-1),  0      )#
 ##### 3. Do the plotting #
 plot(x = NULL, y = NULL, type = "l", bty = "l", yaxs = "i", axes = FALSE,#
     xlim = range(x_value), ylim = c(0, 1.2 * max(y_value_z)),  #
     xlab = "z / t value", ylab = "Density", font.lab = 2)#
 if (fill_critical_region) {#
 	if (two_tails) {#
  polygon(x = - polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba") }#
  polygon(x = polygon_right_x, y = polygon_right_y, border = "white", col = "#f4cdba")     #
 }#
 if (fill_confidence_interval){#
  polygon(x = polygon_between_x, y = polygon_between_y, border = "white", col = "#f4cdba")#
  segments(- t_value, 0, - t_value, dt(0, df = n - 1) / 1.5)   	#
  segments(+ t_value, 0, + t_value, dt(0, df = n - 1) / 1.5)#
  text(x = 0, y = dt(0, df = n - 1) / 10, pos = 3, #
   label = bquote("Middle"~.(100 - alpha_level * 100)~"% of"~italic(t)~"distribution") )	#
 }#
#
 lines(x_value, y_value_t, col = tcolor, lwd = 2)#
 text(x = 0, y = max_y / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text(x = 0, y = max_y / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 text(x = 0, y = max_y / 2.5, labels = bquote(italic(alpha / 2) == .(alpha_value)))#
 axis(2, at = c(0, max_y + 0.2), labels = c("", ""), lwd.ticks = 0)#
 axis(2, at = seq(0, max_y + 0.1, by = 0.1), lwd = 0, lwd.ticks = 1)#
 axis(1, at = c(min(x_value) - 0.5, max(x_value) + 0.5), labels = c("", ""), lwd.ticks = 0)#
 axis(1, at = seq(min(x_value), max(x_value), by = 1), lwd = 0, lwd.ticks = 1)#
#
 if (show_normal_curve) {#
   legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
     legend = c("unit normal distribution", "t distribution"))	#
   } else {#
   legend("top", lty = 1,  col = tcolor, bty = "n", legend = "t distribution") 	#
  }#
 if (show_critical_region) {#
  if (two_tails) abline(v = c(t_value, -t_value), col = tcolor, lty = 2) #
            else abline(v = t_value, col = tcolor, lty = 2)#
  text(x = t_value, y = max_y / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue)))	#
  }#
#
 ##### 4. Add normal curve #
 if (show_normal_curve) {#
  lines(x_value, y_value_z, col = zcolor, lwd = 2) #
  if (show_critical_region) {#
  if (two_tails) { abline(v = c(z_value, -z_value), col = zcolor, lty = 2) }#
            else { abline(v = z_value, col = zcolor, lty = 2) }  	#
  }#
  text(x = z_value,y = max_y / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue))) #
  }#
}
Plot_t_Distribution (show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
acqr::Plot_t_Distribution(show_critical_region=F, alpha_level = 0.2, show_normal_curve=F, n = 9, two_tails=T, fill_confidence_interval=T, fill_critical_region=F)
acqr::Plot_Sample_Frequency()
wlr <- c(11, 9, 4, 5, 6, 7, 12, 10)#
dlr <- c(7, 13, 14, 16, 9, 11, 15, 11)
acqr::Plot_Sample_Frequency(wlr)
acqr::Plot_Sample_Frequency(dlr, add=T)
acqr::Plot_Sample_Frequency(dlr)
install.packages(SuppDists)
install.packages("SuppDists")
help(,SuppDists)
?var.test
var.test
?pf
?var.test
methods(var.test)
var.test.default
getAnywhere(var.test.default)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1 )#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total_values_x), text = bquote(italic(M) == .(round(mean(sample_total_values_x), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T)
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Unique"]])
sample_total_unique_length
sample_total_tidy[["Unique"]]
sample_total_tidy
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1 )#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total_values_x), text = bquote(italic(M) == .(round(mean(sample_total_values_x), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T)
mean(c(sample1, sample2))
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1 )#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1 )#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1 )#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, #
      y0 = seq(max(sample_1_unique_frequency) + 0.1 , max(sample_1_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      x1 = rep(mean(sample1), sample_1_unique_length), #
      y1 = seq(max(sample_1_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST=F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, #
      y0 = seq(max(sample_1_unique_frequency) + 0.1 , max(sample_1_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      x1 = sample_1_unique_x, #
      y1 = seq(max(sample_1_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, y0 = sample_1_unique_frequency, x1 = sample_1_unique_x, #
      y1 = seq(max(sample_1_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, y0 = sample_total_unique_frequency, x1 = sample_1_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.4, length.out = sample_1_unique_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, y0 = sample_total_unique_frequency, x1 = sample_1_unique_x, #
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_total_unique_frequency,#
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
sample1
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_tidy <- sample_1_tidy[sort(sample_1_tidy[["Table_Unique"]][["data"]]), ]  #
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_total_unique_frequency,#
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_tidy <- sample_1_tidy[order(sample_1_tidy[["Table_Unique"]][["data"]]), ]  #
  sample_1_unique_x <- sort(sample_1_unique_x)#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_total_unique_frequency,#
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_x <- sample_1_unique_x[order(sample_1_unique_x)]#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_frequency <- sample_1_unique_frequency[order(sample_1_unique_x)]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_total_unique_frequency,#
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_unique_x <- sample_2_tidy[["Table_Unique"]][["data"]]#
  sample_2_unique_x <- sort(sample_2_unique_x)#
  sample_2_unique_frequency <- sample_2_tidy[["Table_Unique"]][["Frequency"]]#
  sample_2_unique_length <- nrow(sample_2_tidy[["Table_Unique"]])#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_total_unique_frequency,#
      y1 = max(sample_total_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
sample_1_unique_x
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_unique_x <- sample_1_tidy[["Table_Unique"]][["data"]]#
  sample_1_unique_frequency <- sample_1_tidy[["Table_Unique"]][["Frequency"]]#
  sample_1_unique_length <- nrow(sample_1_tidy[["Table_Unique"]])
sample_1_unique_x
sample_1_unique_length
sample_1_unique_frequency
sample_1_values_x <- sample_total_unique_x[sample_total_unique_x %in% sample1]
sample_1_values
sample_1_values_x
sample_total_unique_x
##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])
sample_total_unique_x
sample_1_values_x <- sample_total_unique_x[sample_total_unique_x %in% sample1]
sample_1_values_x
sample_total_tidy[["Table_Unique"]][sample_total_tidy[["Table_Unique"]][["data"]] %in% sample_1_unique_x, "Frequency"]
sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_unique_x, "Frequency"]
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_unique_x <- sample_total_unique_x[sample_total_unique_x %in% sample1]#
  sample_1_uniuqe_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_unique_x, "Frequency"]#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_1_unique_frequency,#
      y1 = max(sample_1_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_unique_x <- sample_total_unique_x[sample_total_unique_x %in% sample1]#
  sample_1_unique_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_unique_x, "Frequency"]#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_1_unique_frequency,#
      y1 = max(sample_1_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_unique_x, x1 = sample_1_unique_x, #
      y0 = sample_1_unique_frequency,#
      y1 = max(sample_1_unique_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, #
      y0 = sample_1_values_frequency,#
      y1 = max(sample_1_values_frequency) + 0.5,#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(population_mean, sample_1_values_frequency), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(population_mean, sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    ## vertical line above mu#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
	segments(x0 = mean(sample1), y0 = length(sample_1_values_frequency[sample_1_values_frequency == mean(sample1)]), #
	  y1 = max(sample_1_values_frequency) + 1)	#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation & SST) {#
    ## vertical line above mu#
    segments(#
      x0 = population_mean, y0 = length(sample_total_unique_frequency[sample_total_unique_frequency == population_mean]), #
      x1 = population_mean, y1 = max(sample_total_unique_frequency) + 1)#
    segments(#
      x0 = sample_total_unique_x, y0 = sample_total_unique_frequency, x1 = sample_total_unique_x, #
      y1 = seq(max(sample_total_unique_frequency) + 0.1, max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length))#
    segments(#
      x0 = sample_total_unique_x, #
      y0 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      x1 = rep(population_mean, sample_total_unique_length), #
      y1 = seq(max(sample_total_unique_frequency) + 0.1 , max(sample_total_unique_frequency) + 0.9, length.out = sample_total_unique_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))), line = 1)#
  }#
#
if (show_sample_deviation & !SST) {#
	segments(x0 = mean(sample1), y0 = length(sample_1_values_frequency[sample_1_values_frequency == mean(sample1)]), #
	  y1 = max(sample_1_values_frequency) + 1)	#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M[1]) == .(round(mean(sample1), 2))), line = 1)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(values * frequency), text = bquote(italic(M) == .(round(mean(values * frequency), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
	segments(x0 = mean(sample1), y0 = length(sample_1_values_frequency[sample_1_values_frequency == mean(sample1)]), #
	  y1 = max(sample_1_values_frequency) + 1)	#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M[1]) == .(round(mean(sample1), 2))), line = 1)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(values * frequency), text = bquote(italic(M) == .(round(mean(values * frequency), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
	segments(x0 = mean(sample1), y0 = length(sample_1_values_frequency[sample_1_values_frequency == mean(sample1)]), #
	  y1 = max(sample_1_values_frequency) + 1)	#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M[1]) == .(round(mean(sample1), 2))), line = 1)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
sample_total_unique_x
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)
sample_total_unique_x
sample_total_unique_frequency
sample_total_unique_x * sample_total_unique_frequency
sum (sample_total_unique_x * sample_total_unique_frequency) / sample_total_unique_frequency
sum (sample_total_unique_x * sample_total_unique_frequency) / sum(sample_total_unique_frequency)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
	segments(x0 = mean(sample1), y0 = length(sample_1_values_frequency[sample_1_values_frequency == mean(sample1)]), #
	  y1 = max(sample_1_values_frequency) + 1)	#
    segments(#
      x0 = sample_1_values_x, x1 = sample_1_values_x, y0 = sample_1_values_frequency, #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "gray")#
    segments(#
      x0 = sample_1_values_x, #
      y0 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      x1 = rep(mean(sample1), sample_1_valus_length), #
      y1 = seq(max(sample_1_values_frequency) + 0.1 , max(sample_1_values_frequency) + 0.9, length.out = sample_1_valus_length),#
      col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M[1]) == .(round(mean(sample1), 2))), line = 1)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = "red")#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length)#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length)#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
mean(sample1)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1)#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length))#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F, population_mean = 5)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T, population_mean = 5)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T, population_mean = 6)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T, population_mean = 7)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
#    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(population_mean, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(population_mean, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(center, values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    sample_mean <- sum(values * frequency) / sum(frequency)#
    mtext(side = 3, at = sample_mean, text = bquote(italic(M) == .(round(sample_mean, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(mean(sample1), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(mean(sample2), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)
sample_1_values_x
sample_1_values_frequency
sum(sample_1_values_frequency)
sample1
length(sample1)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = center, text = bquote(italic(M) == .(round(center, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = center, text = bquote(italic(M) == .(round(center, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = center, text = bquote(italic(M) == .(round(center, 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T, population_mean=9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + 0.1, max(frequency) + 0.9, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red")#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red")#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue")    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, 0.45)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", 0.45, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)))	#
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))), line = 1)	#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(c(sample1, sample2), show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end, show_population_mu = TRUE) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    if (show_population_mu)	{#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1) }#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point, show_population_mu = F)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9, show_population_mu = F)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end, show_population_mu = TRUE) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    if (show_population_mu)	{#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1) }#
 }#
#
  if (show_sample_deviation & SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)#
  }#
#
if (show_sample_deviation & !SST) {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, , sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point, show_population_mu = F)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, , sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9, show_population_mu = F)    	#
    }#
}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
#
  if (show_sample_deviation) {#
  	if (show_SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)  		#
  	} else {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, mean(c(sample1, sample2)), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, mean(c(sample1, sample2)), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }  		#
  	}#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
#
  if (show_sample_deviation) {#
  	if (show_SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)  		#
  	} else {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, mean(c(sample1, sample2)), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, mean(c(sample1, sample2)), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }  		#
  	}#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
#
  if (show_sample_deviation) {#
  	if (show_SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)  		#
  	} else {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, mean(c(sample1, sample2)), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, mean(c(sample1, sample2)), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }  		#
  	}#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
#
  if (show_sample_deviation) {#
  	if (show_SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)  		#
  	} else {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, mean(c(sample1, sample2)), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, mean(c(sample1, sample2)), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }  		#
  	}#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
#
  if (show_sample_deviation) {#
  	if (show_SST) {#
    add_vertical_horizontal_lines(sample_total, population_mean, sample_total_unique_x, sample_total_unique_frequency, sample_total_unique_length, color = "red", 0.1, 0.9)  		#
  	} else {#
	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, mean(c(sample1, sample2)), sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, mean(c(sample1, sample2)), sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }  		#
  	}#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
 add_lines_together <- function(center) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean)#
     } else  {#
   	  add_lines_together(mean(c(sample1, sample2)))    	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
 add_lines_together <- function(center) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean)#
     } else  {#
   	  add_lines_together(mean(c(sample1, sample2)))    	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
 add_lines_together <- function(center) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean)#
     } else  {#
   	  add_lines_together(mean(c(sample1, sample2)))    	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
    mtext(side = 3, at = center, text = bquote(italic(mu[0]) == .(center)), line = 1)#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = T, population_mean = 8)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = T, population_mean = 8)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#a0d5cf", border = "#009f9b", #
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#f8cea2", border = "#b78135", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = T, population_mean = 9)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#f8cea2", border = "#b78135"#
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#a0d5cf", border = "#009f9b", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#f8cea2", border = "#b78135",#
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#a0d5cf", border = "#009f9b", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#f8cea2", border = "#b78135",#
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#a0d5cf", border = "#009f9b", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#f8cea2", border = "#b78135",#
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#a0d5cf", border = "#009f9b", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
fill = "#f8cea2", border = "#b78135",#
#fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
show_SST = TRUE,#
...#
){#
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = "#a0d5cf", border = "#009f9b", add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)    	#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
sample1_col <- c("#f8cea2", "#b78135")
sample_col[1]
sample1_col[1]
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = "")#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table_1[Table_1[, "data"] == round(mean(sample1), 0), "Freq"]#
  	segments(x0 = mean(sample1), y0 = segment_y0, x1 = mean(sample1), y1 = max(freq) + 2)#
    arrows(mean(sample1)- sd(sample1), ylim[2]-0.5, mean(sample1) + sd(sample1), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample1), text = bquote(italic(M) == .(round(mean(sample1), 2))))#
    text(x = mean(sample1) + sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
    text(x = mean(sample1) - sd(sample1) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample1), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F, show_sample_sigma=T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]#
  	segments(x0 = mean(sample_total), y0 = segment_y0, x1 = mean(sample_total), y1 = max(freq) + 2)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F, show_sample_sigma=T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]#
  	segments(x0 = mean(sample_total), y0 = segment_y0, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 2)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F, show_sample_sigma=T)
sample_total <- c(sample1, sample2)
segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]
segment_y0
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }
segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]
sample_total_tidy <- sample_tidy(sample_total)
segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]
segment_y0
segments(x0 = mean(sample_total), y0 = segment_y0, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]#
  	segments(x0 = mean(sample_total), y0 = segment_y0, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F, show_sample_sigma=T)
sample_total_frequency_x
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])
sample_total_frequency_x
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]#
  	#segments(x0 = mean(sample_total), y0 = segment_y0, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = T, show_SST = F, show_sample_sigma=T)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = F, show_SST = F, show_sample_sigma=T)
segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]
sample_total <- c(sample1)
sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }
sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])
segment_y0 <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][, "data"] == mean(sample_total), "Frequency"]
segment_y0
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = max(sample_total_frequency_x) - 0.5, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = F, show_SST = F, show_sample_sigma=T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    	#
     } #
  	}#
 mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = F, show_SST = F, show_sample_sigma=T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = F, show_SST = F, show_sample_sigma=T)
rm(list = ls())#
Plot_Sample_FrequencyN <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE)  	#
  }#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(sample_total_tidy[["Table"]]), function(i) {#
    invisible(lapply(1:sample_total_frequency_x[i], function(j){#
      segments(sample_total_values_x[i]  - bin_width / 2, 1:j, sample_total_values_x[i]  + bin_width / 2, 1:j, col = NA)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    if(!is.null(sample2)) {#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "blue", break_point, 0.9)#
    legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))#
    }	#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
sample1 = c(11, 9, 4, 5, 6, 7, 12, 10)#
sample2 = c(7, 13, 14, 16, 9, 11, 15, 11)#
#
Plot_Sample_FrequencyN(sample1, sample2, show_sample_deviation = T, show_SST = F)
Plot_Sample_FrequencyN(sample1, show_sample_deviation = F, show_SST = F, show_sample_sigma=T)
1/8
library(acqr)
Plot_Sample_Frequency()
Plot_Sample_Frequency
args(Plot_Sample_Frequency)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample2_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
acqr::Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
acqr::Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample2_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample2_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample2_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample2_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample2_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  }   	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample1_col[2])#
  } #
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample2_col[2])  	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
acqr::Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample2_col[2])#
  } #
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample2_col[2])  	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
acqr::Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
Plot_Sample_Frequency <- function(#
sample1, sample2 = NULL, #
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(c(sample1, sample2)),#
population_sd = sd(c(sample1, sample2)),#
show_SST = TRUE,#
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 0. Define colors #######
  sample1_col <- c("#f8cea2", "#b78135")#
  sample2_col <- c("#a0d5cf", "#009f9b") #
  ##### 1. Calculate the required value #######
  sample_tidy <- function (sample) {#
    Mean <- mean(sample)#
    Table <- as.data.frame(table(sample, dnn = "data"))#
    names(Table)[names(Table) == "Freq"] <- "Frequency"#
    Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
    Table_Unique <- Table[Table[, "data"] != Mean, ]#
    res <- list(Table = Table, Table_Unique = Table_Unique, Mean = Mean)#
    return(res)	#
  }#
  sample_total <- c(sample1, sample2)#
  sample_total_tidy <- sample_tidy(sample_total)#
  sample_total_values_x <- sample_total_tidy[["Table"]][["data"]]#
  sample_total_values_x <- sort(sample_total_values_x)#
  sample_total_frequency_x <- sample_total_tidy[["Table"]][["Frequency"]]#
  sample_total_unique_x <- sample_total_tidy[["Table_Unique"]][["data"]]#
  sample_total_unique_x <- sort(sample_total_unique_x)#
  sample_total_unique_frequency <- sample_total_tidy[["Table_Unique"]][["Frequency"]]#
  sample_total_unique_length <- nrow(sample_total_tidy[["Table_Unique"]])#
  sample_1_tidy <- sample_tidy(sample1)#
  sample_1_values_x <- sample_total_values_x[sample_total_values_x %in% sample1]#
  sample_1_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_1_values_x, "Frequency"]#
  sample_1_valus_length <- length(sample_1_values_x)#
  sample_2_tidy <- if (!is.null(sample2)) sample_tidy(sample2) else sample_1_tidy#
  sample_2_values_x <- sample_total_values_x[sample_total_values_x %in% sample2]#
  sample_2_values_frequency <- sample_total_tidy[["Table"]][sample_total_tidy[["Table"]][["data"]] %in% sample_2_values_x, "Frequency"]#
  sample_2_valus_length <- length(sample_2_values_x)#
  bin_width <- min(sample_total_values_x[-1] - sample_total_values_x[-length(sample_total_values_x)])#
  xlim <- c(min(sample_total_values_x) - bin_width, max(sample_total_values_x) + bin_width)#
  ylim <- c(0, max(sample_total_frequency_x) + 1)#
  breaks <- seq(min(sample_total_values_x) - bin_width / 2, max(sample_total_values_x) + bin_width / 2, by = bin_width)#
  xlabel <- round(seq(min(sample_total_values_x), max(sample_total_values_x), by = bin_width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(sample_total_frequency_x), by = 1)#
  ydensitylabel <- format(ylabel / length(sample_total), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(sample_total, ylim = ylim, xlim = xlim, breaks = breaks, font.lab = 2,#
    col = sample1_col[1], border = sample1_col[2], main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  plot_grids <- function(tidy, frequency, values, color) {#
    invisible(lapply(1:nrow(tidy[["Table"]]), function(i) {#
    invisible(lapply(1:frequency[i], function(j){#
      segments(values[i]  - bin_width / 2, 1:j, values[i]  + bin_width / 2, 1:j, col = color)#
              }))#
      }))  	#
  }#
  if (show_sample_grid) {#
  if (!is.null(sample2)) {#
  plot_grids(sample_2_tidy, sample_2_values_frequency, sample_2_values_x, sample2_col[2])#
  } #
  plot_grids(sample_total_tidy, sample_total_frequency_x, sample_total_values_x, sample1_col[2])  	#
  }#
  if (!is.null(sample2)) {#
  hist(x = sample1, breaks = breaks, col = sample2_col[1], border = sample2_col[2], add = TRUE) #
  legend( "topleft", lwd = 10, col = c(sample1_col[1], sample2_col[1]), bty = "n", legend = c("Condition A",  "Condition B"))  	#
  } #
   ##### Add legends if two sampels are included#
  if (show_sample_sigma) {#
  	segments(x0 = mean(sample_total), y0 = ylim[2] - 1, x1 = mean(sample_total), y1 = max(sample_total_frequency_x) + 1)#
    arrows(mean(sample_total)- sd(sample_total), ylim[2] - 0.5, mean(sample_total) + sd(sample_total), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(sample_total), text = bquote(italic(M) == .(round(mean(sample_total), 2))))#
    text(x = mean(sample_total) + sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
    text(x = mean(sample_total) - sd(sample_total) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(sample_total), 2))), pos = 3)#
  }#
 add_vertical_horizontal_lines <- function(sample, center = mean(sample), values, frequency, length, color, start, end) {#
     ## vertical line above mu#
    segments(x0 = center, y0 = length(frequency[frequency == center]), y1 = max(frequency) + 1, col = "gray")#
    ## vertical lines above each unique observation#
    segments(x0 = values, y0 = frequency, y1 = seq(max(frequency) + start, max(frequency) + end, length.out = length), col = "gray")#
    ## horizontal lines connecting the vertical lines and the population mean#
    segments(x0 = values, y0 = seq(max(frequency) + start, max(frequency) + end, length.out = length), x1 = rep(center, sample_total_unique_length), col = color)#
    ## #
    mtext(side = 3, at = mean(sample), text = bquote(italic(M) == .(round(mean(sample), 2))))#
 }#
 add_lines_together <- function(center1, center2) {#
  	break_point <- (sample_1_valus_length / sample_total_unique_length) * 0.8#
    if(is.null(sample2)) {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "red", 0.1, break_point)#
    } else {#
    add_vertical_horizontal_lines(sample1, center1, sample_1_values_x, sample_1_values_frequency, sample_1_valus_length, color = "blue", 0.1, break_point)#
    add_vertical_horizontal_lines(sample2, center2, sample_2_values_x, sample_2_values_frequency, sample_2_valus_length, color = "red", break_point, 0.9)#
    }#
 }#
  if (show_sample_deviation) {#
  	if (show_SST) {#
  	  add_lines_together(population_mean, population_mean)#
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)#
     } else  {#
   	  add_lines_together(mean(sample1), mean(sample2))    #
  	  mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)), line = 1)	#
     } #
  	}#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(sample1)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
}#
#
trt1 <- c(6, 7, 7, 8, 8, 8, 9, 9, 10)#
trt2 <- c(11, 12, 12, 13, 13, 13, 14, 14, 15)#
acqr::Plot_Sample_Frequency(trt1, trt2, show_sample_deviation = F, show_SST = F)
