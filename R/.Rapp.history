###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  tail = 2,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  # X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  # Critical X values#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  ## Tail#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(if (tail == 2) alpha_level / 2 else alpha_level, digits = 2, format = "fg"))#
  alpha_com <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail, mean = m0, sd = sigma_m), 0, 0,#
              dnorm(high_tail, mean = m0, sd = sigma_m), 0)#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      text(x = X_min - sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(alpha_com)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
  ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)#
  }#
if (arrow) {#
segments(#
  x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
  y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)),#
  lty = 5)#
arrows(#
  x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
  x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
}#
#
#### add some point#
if (!is.null(data_points)) {#
for (point in data_points) {#
mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
}#
}#
###### add area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
}
pp()
pp(fill = F)
pp(fill = F, alternative_hypothesis=F)
pp(m1=0, fill = F, alternative_hypothesis=F)
pp(m1=0, fill = F, alternative_hypothesis=F, decision=F)
pp(m1=0, fill = F, alternative_hypothesis=F, decision=F, area=c(0,2))
pp(m1=0, fill = F, alternative_hypothesis=F, decision=F, area=c(0, 1))
pp(m1=0, fill = F, alternative_hypothesis=F, decision=F, area=c(1, 2))
pp(m1=0, fill = F, alternative_hypothesis=F, decision=F, area=c(2, Inf))
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      text(x = X_min - sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min - sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max + sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 2)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F)
pp(two_tails=T)
pp(two_tails=F)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min - sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max + sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min - sigma_m * 0.5, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F)
pp(two_tails=T)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 2,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max - sigma_m * 0.4, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=T)
pp(two_tails=F)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F)
pp(two_tails=F, alpha_level = 0.01)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha("#DC143C", alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha("#D2691E", alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha("#00008B", alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha("#1E90FF", alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 3,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F, alpha_level = 0.01)
pp(two_tails=F, alpha_level = 0.01, alternative_hypothesis=F)
pp(two_tails=F, alpha_level = 0.01, correct_reject=F)
pp(two_tails=F, alpha_level = 0.01, correct_reject=F, hit=F)
pp(two_tails=F, alpha_level = 0.01, correct_reject=F, hit=T)
pp(two_tails=F, alpha_level = 0.01)
###### Add alpha to colors#
col2alpha <- function(col, alpha) {#
  col_rgb <- col2rgb(col)/255#
  rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
}#
#
####### Plot_Population_Density_with_Two_Distributions#
pp <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sd_range = 5, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Define the colors#
  plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google#
  # plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700")#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sd_range * sigma_m, m0 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sd_range * sigma_m, m1 + sd_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha(plot_colors[1], alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha(plot_colors[2], alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha(plot_colors[3], alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha(plot_colors[4], alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z") {#
  	llabel <- if (Axis == "X") {round(label_pos, 2)} else {round((label_pos - m0) / sigma_m, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)#
  }#
#
  if (AX) {#
    AXZ(0, "X")#
    if (AZ) AXZ(2.5, "z")#
  } else {#
  	AXZ(0, "z")#
  }#
#
  ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = bquote(sigma[M] == .(round(sigma_mm, 2))))#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 3,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[0]), side = 3, at = m0)#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sd_range * sigma_m else if (pp == -Inf) m0 + sd_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
pp(two_tails=F, alpha_level = 0.01)
pp(two_tails=F, alpha_level = 0.1, alternative_hypothesis=F)
pp(two_tails=F, alpha_level = 0.1, null_hypothesis=F)
pp(two_tails=F, alpha_level = 0.01, null_hypothesis=F)
pp(two_tails=F, alpha_level = 0.01, alternative_hypothesis=F)
####### Plot_Population_Density_with_Two_Distributions#
Plot_Population_Density <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sigma_range = 4, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Define the colors#
  plot_colors <- c("#0087sigma_range44", "#0057e7", "#d62d20", "#ffa700") # google#
  # plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700")#
  col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col)/255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sigma_range * sigma, m0 + sigma_range * sigma, by = 0.01 * sigma)#
  X1s <- seq(m1 - sigma_range * sigma, m1 + sigma_range * sigma, by = 0.01 * sigma)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha(plot_colors[1], alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha(plot_colors[2], alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha(plot_colors[3], alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha(plot_colors[4], alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX | (!AX & ! AZ)) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = if (n==1) bquote(sigma == .(round(sigma_mm, 2)))#
                       else bquote(sigma[M] == .(round(sigma_mm, 2)))#
         )#
  mtext(expression(H[0]), side = 3, at = m0)#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 3,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z", show_label = TRUE) {#
  	llabel <- if (Axis == "z") {round((label_pos - m0) / sigma_m, 2)} else {round(label_pos, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    if (show_label) {#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)	#
    }#
  }#
#
  if (AX) {#
  	if (n == 1) AXZ(  0, "X") else AXZ(0, "M")#
    if (AZ)     AXZ(2.5, "z")#
  } else {#
  	if (AZ) AXZ(0, "z") else AXZ(0, "z", show_label = FALSE)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sigma_range * sigma else if (pp == -Inf) m0 + sigma_range * sigma  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F)
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 26, AZ = T, correct_reject = F, miss = F)
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 25, AZ = T, correct_reject = F, miss = F)
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F)
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(-Inf, 80))
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(50, 80))
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(70, 80))
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(75, 80))
####### Plot_Population_Density_with_Two_Distributions#
Plot_Population_Density <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sigma_range = 4, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Define the colors#
  plot_colors <- c("#0087sigma_range44", "#0057e7", "#d62d20", "#ffa700") # google#
  # plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700")#
  col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col)/255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sigma_range * sigma_m, m0 + sigma_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sigma_range * sigma_m, m1 + sigma_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha(plot_colors[1], alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha(plot_colors[2], alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha(plot_colors[3], alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha(plot_colors[4], alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX | (!AX & ! AZ)) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = if (n==1) bquote(sigma == .(round(sigma_mm, 2)))#
                       else bquote(sigma[M] == .(round(sigma_mm, 2)))#
         )#
  mtext(expression(H[0]), side = 3, at = m0)#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 3,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z", show_label = TRUE) {#
  	llabel <- if (Axis == "z") {round((label_pos - m0) / sigma_m, 2)} else {round(label_pos, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    if (show_label) {#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)	#
    }#
  }#
#
  if (AX) {#
  	if (n == 1) AXZ(  0, "X") else AXZ(0, "M")#
    if (AZ)     AXZ(2.5, "z")#
  } else {#
  	if (AZ) AXZ(0, "z") else AXZ(0, "z", show_label = FALSE)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sigma_range * sigma_m else if (pp == -Inf) m0 - sigma_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(75, 80))
####### Plot_Population_Density_with_Two_Distributions#
Plot_Population_Density <- function (#
  m0 = 0, #
  m1 = 4, #
  sigma = 1, #
  sigma_range = 4, #
  x_range = NULL,#
  n = 1, #
  alpha_level = 0.05,#
  two_tails = TRUE,#
  show_alpha_level = TRUE,#
  null_hypothesis = TRUE, correct_reject = TRUE, false_alarm = TRUE,#
  alternative_hypothesis = TRUE, hit = TRUE, miss = TRUE,#
  fill = TRUE,#
  decision = TRUE, #
  AX = TRUE, #
  AZ = FALSE, #
  data_points = NULL, #
  arrow = FALSE,#
  area = NULL#
)#
{#
  #### Define the colors#
  plot_colors <- c("#0087sigma_range44", "#0057e7", "#d62d20", "#ffa700") # google#
  # plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700")#
  col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col)/255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
  #### Calculate critical values#
  sigma_m <- sigma / sqrt(n)#
  d <- (m1 - m0) / sigma#
  ### X and Ys#
  X0s <- seq(m0 - sigma_range * sigma_m, m0 + sigma_range * sigma_m, by = 0.01 * sigma_m)#
  X1s <- seq(m1 - sigma_range * sigma_m, m1 + sigma_range * sigma_m, by = 0.01 * sigma_m)#
  Xs <- sort(cbind(X0s, X1s))#
  if (is.null(x_range)) Xs <- Xs else Xs <- seq(min(x_range), max(x_range), by = 0.01 * sd(x_range))#
  Y0s <- dnorm(Xs, mean = m0, sd = sigma_m)#
  Y1s <- dnorm(Xs, mean = m1, sd = sigma_m)#
  #### Calculate values for Null Hypothesis#
  if (two_tails) {#
  X_min <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = TRUE)#
  X_max <- qnorm(alpha_level / 2, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  low_tail <- seq(min(Xs), X_min, by = sigma_m * 0.001)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level / 2, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(X_min, X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(low_tail), low_tail, max(low_tail), min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(low_tail,  mean = m0, sd = sigma_m), 0, #
              0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  } else {#
  X_max <- qnorm(alpha_level, mean = m0, sd = sigma_m, lower.tail = FALSE)#
  high_tail <- seq (X_max, max(Xs), by = sigma_m * 0.001)#
  alpha_value <- sub("^0\\.", ".", formatC(alpha_level, digits = 2, format = "fg"))#
  correct_rject_value <- sub("^0\\.", ".", formatC(1 - alpha_level, digits = 2, format = "fg"))#
  boddy <- seq(min(Xs), X_max, by = sigma_m * 0.001)#
  tail_x <- c(min(high_tail), high_tail, max(high_tail) )#
  tail_y <- c(0, dnorm(high_tail, mean = m0, sd = sigma_m), 0)  	#
  }#
#
  tail_col <- col2alpha(plot_colors[1], alpha = 0.5)#
  body_x <- c(min(boddy), boddy, max(boddy))#
  body_y <- c(0, dnorm(boddy, mean = m0, sd = sigma_m), 0)#
  body_col <- col2alpha(plot_colors[2], alpha = 0.5)#
  #### Calculate values for Alternative Hypothesis#
  beta_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m)#
  beta_value <- formatC(beta_value, digits = 2, format = "fg")#
  beta_value <- sub("^0\\.", ".", beta_value)#
  power_value <- pnorm(q = high_tail, mean = m1, sd = sigma_m, lower.tail = FALSE)#
  power_value <- formatC(power_value, digits = 2, format = "f")#
  power_value <- sub("^0\\.", ".", power_value)#
  beta_range <- seq(min(min(X1s), X_max), max(min(X1s), X_max), by = sigma_m * 0.001)#
  beta_x <- c(min(X1s), beta_range, X_max)#
  beta_y <- c(0, dnorm(beta_range, mean = m1, sd = sigma_m), 0)#
  beta_col <- col2alpha(plot_colors[3], alpha = 0.5)#
  power_range <- seq( X_max, max(X1s), by = sigma_m * 0.001)#
  power_x <- c(X_max, power_range, max(X1s))#
  power_y <- c(0, dnorm(power_range, mean = m1, sd = sigma_m), 0)#
  power_col <- col2alpha(plot_colors[4], alpha = 0.5)#
  label_pos <- seq(min(Xs), max(Xs), by = sigma_m)#
  label_pos <- unique(c(label_pos, data_points))#
#
 ######## Do the plot#
  plot(NULL, NULL, #
    xlim = range(Xs),#
    ylim = c(0, (1 + 0.01) * max(Y0s) ),#
    axes = FALSE, xlab = "", ylab = "", yaxs = "i")#
 ####### Plot the null hypothesis#
  if (null_hypothesis){#
  	if (false_alarm & fill) {#
      polygon(tail_x, tail_y, col = tail_col, border = "white")#
      if (show_alpha_level){#
      	if (two_tails){#
          text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha / 2 == .(alpha_value)), pos = 2)      		#
      	  } else {#
          text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 15, #
           label = bquote(alpha == .(alpha_value)), pos = 4)       	  	#
      	  }#
      }#
   }#
   if (correct_reject & fill) {#
      polygon(body_x, body_y, col = body_col, border = "white")#
      if (show_alpha_level){#
      text(x = m0 - sigma_m * 0.6, y = dnorm(m0, m0, sd = sigma_m) / 3,#
           bquote(1 - alpha == .(correct_rject_value)), pos = 3)#
      }#
    }#
    lines(Xs, Y0s, col = "#cf232a", lwd = 2)#
    abline(v = m0, lwd = 1)#
    arrows(x0 = m0, y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
           x1 = m0 + sigma_m, y1 = dnorm(m0 + sigma_m, m0, sigma_m),#
           length = 0.1)#
    if (AX | (!AX & ! AZ)) sigma_mm <- sigma_m else sigma_mm <- 1#
    text(x = m0 + sigma_m / 2, y = dnorm(m0 + sigma_m, m0, sigma_m), pos = 1,#
         labels = if (n==1) bquote(sigma == .(round(sigma_mm, 2)))#
                       else bquote(sigma[M] == .(round(sigma_mm, 2)))#
         )#
  mtext(expression(H[0]), side = 3, at = m0)#
  }#
  ###### Plot the alternative hypothesis#
  if (alternative_hypothesis){#
    if (miss & fill) {#
    polygon(beta_x, beta_y, col = beta_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max, y = dnorm(m1, m1, sd = sigma_m) / 15,#
           labels = bquote(beta == .(beta_value)), pos = 2)#
      }#
    }#
  if (hit & fill) {#
    polygon(power_x, power_y, col = power_col, border = "white")#
    if (show_alpha_level){#
      text(x = X_max + abs(m1 - X_max) * 0.5,#
           y = dnorm(m1, m1, sd = sigma_m) / 3,#
           labels = bquote(1-beta == .(power_value)), pos = 4)#
      }#
    }#
    lines(Xs, Y1s, col = "#d5493a", lwd = 2)#
    abline(v = m1, lwd = 1, col = "gray")#
    mtext(expression(H[1]),  side = 3, at = m1)#
    mtext(text = bquote("Cohen's d" == .(d)~", n"==.(n)), side = 3, at = (m0 + m1) / 2, padj = -2)#
  }#
#
 ####### X-Axes and Z-Axes#
  AXZ <- function (Baseline = 2.5, Axis = "z", show_label = TRUE) {#
  	llabel <- if (Axis == "z") {round((label_pos - m0) / sigma_m, 2)} else {round(label_pos, 2)}#
    axis(1, at = c(min(label_pos) - 0.5 * sigma_m, max(label_pos) + 0.5 * sigma_m), labels = c("", ""), lwd.ticks = 0, line = Baseline)#
    if (show_label) {#
    axis(1, at = label_pos, label = rep("", length(label_pos)), lwd = 0, lwd.ticks = 1, line = Baseline)#
    axis(1, at = label_pos, label = llabel, lwd = 0, lwd.ticks = 0, line = Baseline - 0.5)#
    mtext(text = bquote(italic(.(Axis))), side = 1, adj = 1.03, line = Baseline - 0.6)	#
    }#
  }#
#
  if (AX) {#
  	if (n == 1) AXZ(  0, "X") else AXZ(0, "M")#
    if (AZ)     AXZ(2.5, "z")#
  } else {#
  	if (AZ) AXZ(0, "z") else AXZ(0, "z", show_label = FALSE)#
  }#
 ####### Add an area#
 if (!is.null(area)){#
  p1 <- area[1]#
  p2 <- area[2]#
  cnvtp <- function(pp) if (pp == Inf) m0 + sigma_range * sigma_m else if (pp == -Inf) m0 - sigma_range * sigma_m  else pp#
  if (! is.na(p1) & ! is.na(p2)){#
    pt1 <- cnvtp(p1)#
    pt2 <- cnvtp(p2)#
    polygon(c(pt1, pt1,                        seq(pt1, pt2, length.out = 1000)          ,        pt2,           pt2),#
            c(0,  dnorm(pt1, m0, sigma_m),  dnorm(seq(pt1, pt2, length.out = 1000), m0, sigma_m), dnorm(pt2, m0, sigma_m), 0),#
            col = col2alpha("#f4cdba", alpha = 0.8) , border = "#af1e23", lwd = 2) ## col2alpha is defined in pPower.R#
    percent <- function(x, digits = 2, format = "f", ...) {#
      paste0(formatC(100 * x, format = format, digits = digits, ...), "%")#
    }#
    area_size <- if(p1 == -Inf) pnorm(p2, m0, sigma_m)#
                   else if (p2 == +Inf) pnorm(p1, m0, sigma_m, lower.tail = FALSE)#
                else pnorm(p2, m0, sigma_m) - pnorm(p1, m0, sigma_m)#
    area_size <- percent(area_size, 2)#
    text(x = mean(c(pt1, pt2)), y = dnorm(m0 + 2 * sigma_m, m0, sigma_m), label = area_size, pos = 1)#
  }	#
 }#
#
  ###### add some data points#
  if (!is.null(data_points)) {#
    for (point in data_points) {#
       mtext(bquote(X == ~.(point)), side = 1, at = point, line = if (AZ) 4 else 2)#
       arrows(point, -dnorm(m0 + sigma_m, m0, sigma_m) / (if (AZ) 3.8 else 8.5), point, 0, xpd = TRUE, length = 0.08)#
     }#
  }#
#
 ####### show the decision#
  if(decision){#
    abline(v = X_max, lty = 3)#
    text(x = X_max, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
          label = expression(paste("Reject ", H[0])),  pos = 4)#
    arrows(x0 = X_max, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_max + sigma_m, length = 0.1)#
    if (two_tails) {#
    abline(v = X_min, lty = 3)#
    text(x = X_min, y = dnorm(m0, m0, sd = sigma_m) / 1.1,#
         label = expression(paste("Reject ", H[0])), pos = 2)#
    arrows(x0 = X_min, y0 = dnorm(m0, m0, sd = sigma_m) / 1.16,#
           x1 = X_min - sigma_m, length = 0.1)    	#
    }#
  }#
  ####### Add the arrow showing the standard errors#
  if (arrow) {#
    segments(#
    x0 = seq(m0 - 2 * sigma_m, m0  + 2 * sigma_m, by = sigma_m), y0 = 0,#
    y1 = c(rep(dnorm(m0 + sigma_m, m0, sigma_m), 2), dnorm(m0, m0, sigma_m), #
      rep(dnorm(m0 + sigma_m, m0, sigma_m), 2)), lty = 5)#
    arrows(#
    x0 = c(m0, m0, m0 + sigma_m, m0 - sigma_m), y0 = dnorm(m0 + sigma_m, m0, sigma_m),#
    x1 = c(m0 + sigma_m, m0 - sigma_m, m0 + 2 * sigma_m, m0 - 2 * sigma_m), length = 0.08)#
   }#
}
col2rgb
?
col2rgb
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(75, 80))
acqr::Plot_Population_Density(m0 = 80, m1 = 88, sigma = 10, n = 4, AZ = T, correct_reject = F, miss = F, fill=F, area=c(75, 80), sigma_range = 5)
pp <- function(#
  alpha = 0.2,#
  df = 8, #
  tail = 2#
){#
t <- seq (-4, 4, by = 0.01)#
den <- dt(t, df)#
low <- qt(alpha / 2, df, lower.tail = TRUE)#
high <- qt(alpha / 2, df, lower.tail = FALSE)#
highs <- qt(alpha, df, lower.tail = FALSE)#
seq <- seq(low, high, by = 0.01)#
plot(#
  x = NULL, #
  y = NULL, #
  xlim = c(-4, 4),#
  ylim = c(0, max(den)),#
  yaxs = "i",#
  xaxs = "i",#
  bty = "l",#
  axes = F,#
  xlab = "t value",#
  ylab = "",#
  font.lab = 2#
)#
if (tail == 2){#
polygon(#
  x = c(#
    low, #
    low,#
    seq,#
    high,#
    high#
  ),#
  y = c(#
    0,#
    dt(low, df),#
    dt(seq, df),#
    dt(high, df),#
    0#
  ),#
  col = "#f4cdba",#
  border= "white"#
)#
}#
axis(1)#
lines(#
  x = t,#
  y = den,#
  col = "#CF232A"#
)#
if (tail == 2){#
segments(#
  x0 = c(low, high),#
  y0 = c(0, 0),#
  x1 = c(low, high),#
  y1 = c(0.25, 0.25)#
)		#
} else {#
segments(#
  x0 = c(highs),#
  y0 = c(0),#
  x1 = c(highs),#
  y1 = c(0.25, 0.25)#
)#
}#
if (tail == 2){#
text(#
  x = 0,#
  y = dt(0, df) /3,#
  labels = bquote(#
    "Middle" #
    ~ .(100 - alpha * 100) #
    ~~ "% of" #
    ~~ italic(t) #
    ~~ "distribution"#
  )#
)#
}#
highh <- ifelse(tail == 2, high, highs)#
highh <- formatC(highh, digits = 3, format="f")#
text(#
  x = highh, #
  y = dt(0, df) /2, #
  labels = bquote(italic(t) == .(highh)), #
  adj = -0.05#
)#
mtext(bquote(alpha == .(alpha)~~", df" == .(df) ))		#
}#
pp(tail = 2)
?bquote
a <- 1; b<-2
a
b
bquote(ilatic(a)==.(a))
bquote(italic(a)==.(a))
bquote(italic(alpha)==.(a))
eval(bquote(italic(alpha)==.(a)))
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp()
pp <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp()
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "X"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp()
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "/n"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp()
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ /n ~ "XX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "/nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "\nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "\nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(atop(italic(alpha / 2) == .(alpha / 2), "XX")))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(atop(italic(alpha / 2) == .(alpha / 2), italic(z) == .(z_value))))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = - z_value, y = maxy / 4.5, adj = -0.03, pos = 2, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, adj = -0.03, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", adj = 0,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4, adj=0,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, pos = 4, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, pos = 4, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp(n=1000, critical=T)
pp(n=30, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = col2alpha(plot_colors[c(1, 3)]), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=30, critical=T)
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[1], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[1]), type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[3]), type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
library(ggsci)
install.package("ggsci")
install.packages("ggsci")
librarh(ggsci)
library(ggsci)
help(,ggsci)
scale_color_npg()
scale_color_npg(1:3)
scale_color_npg(3)
scale_color_npg()
show_col(pal_aaas("default")(10))
library("scales")
show_col(pal_aaas("default")(10))
show_col(pal_aaas("default")(10)[1,3])
show_col(pal_aaas("default")(10)[1])
show_col(pal_aaas("default")(10)[3])
show_col(pal_aaas("default")(10)[2])
pal_aaas("default")(10)[2]
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[2], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
rm(list=ls())
ls()
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[2], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[4], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
show_col(pal_aaas("default")(10))
show_col(pal_aaas("default")(10)[2])
show_col(pal_aaas("default")(10)[3])
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5, col = tcolor,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp(n=10, critical=T)
pp(n=100, critical=T)
pp(n=1000, critical=T)
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.6, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp(n=8, critical=T)
pp(n=4, critical=T)
pp(n=2, critical=T)
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = 0, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = -0.01, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp(n=2, critical=T)
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution(n=2, two_tails = F, critical=T)
Plot_t_Distribution(n=3, two_tails = F, critical=T)
Plot_t_Distribution(n=2, two_tails = F, critical=T)
mu <- 10#
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)#
n <- length(sample)#
hist(#
   x = sample, #
   breaks = 7.5:17.5, #
   axes = FALSE, #
   xlim = c(7, 18), #
   ylim = c(0, 3),#
   xaxs = "i",#
   yaxs = "i",#
   main = "",#
   col = "#f7cda1",#
   lwd = 2,#
   border = "#b78135",#
   xlab = "Time spent looking at the attractive face (in seconds)",#
   ylab = "Number of kids",#
   font.lab = 2#
)#
axis(#
   side = 2,#
   at = 0:2#
)#
axis(#
  side = 1,#
  at = 7:18#
)#
segments(#
  x0 = c(13, 10),#
  y0 = c(2, 1),#
  x1 = c(13, 10),#
  y1 = c(3, 1.7)#
)#
segments(#
  x0 = c(11.5, 16.5),#
  y0 = c(1, 1),#
  x1 = c(13.5, 17.5),#
  y1 = c(1, 1),#
  col = "#b78135"#
)#
mtext(#
  side = 3, #
  at= 13, #
  text = bquote(italic(M) == .(mean(sample)))#
)#
arrows(#
  x0 = c(13, 13),#
  y0 = c(2.5, 2.5),#
  x1 = c(14.5, 11.5),#
  y1 = c(2.5, 2.5),#
  length = c(0.1, 0.1)#
)#
text(#
  x = 12, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 14, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 10, #
  y = 1.8, #
  label = bquote(italic(mu) == 10), #
  adj = 0.5#
)
mu <- 10#
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)#
n <- length(sample)#
hist(#
   x = sample, #
   breaks = 7.5:17.5, #
   axes = FALSE, #
   xlim = c(7, 18), #
   ylim = c(0, 3),#
   xaxs = "i",#
   yaxs = "i",#
   main = "",#
   col = "#f7cda1",#
   lwd = 2,#
   border = "#b78135",#
   xlab = "Time spent looking at the attractive face (in seconds)",#
   ylab = "Number of kids",#
   font.lab = 2#
)#
axis(#
   side = 2,#
   at = 0:2#
)#
axis(#
  side = 1,#
  at = 7:18#
)#
segments(#
  x0 = c(13, 10),#
  y0 = c(2, 1),#
  x1 = c(13, 10),#
  y1 = c(3, 1.7)#
)#
segments(#
  x0 = c(11.5, 16.5),#
  y0 = c(1, 1),#
  x1 = c(13.5, 17.5),#
  y1 = c(1, 1),#
  col = "#b78135"#
)#
mtext(#
  side = 3, #
  at= 13, #
  text = bquote(italic(M) == .(mean(sample)))#
)#
arrows(#
  x0 = c(13, 13),#
  y0 = c(2.5, 2.5),#
  x1 = c(14.5, 11.5),#
  y1 = c(2.5, 2.5),#
  length = 0.1#
)#
text(#
  x = 12, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 14, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 10, #
  y = 1.8, #
  label = bquote(italic(mu) == 10), #
  adj = 0.5#
)
mu <- 10#
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)#
n <- length(sample)#
hist(#
   x = sample, #
   breaks = 7.5:17.5, #
   axes = FALSE, #
   xlim = c(7, 18), #
   ylim = c(0, 3),#
   xaxs = "i",#
   yaxs = "i",#
   main = "",#
   col = "#f7cda1",#
   lwd = 2,#
   border = "#b78135",#
   xlab = "Time spent looking at the attractive face (in seconds)",#
   ylab = "Number of kids",#
   font.lab = 2#
)#
axis(#
   side = 2,#
   at = 0:2#
)#
axis(#
  side = 1,#
  at = 7:18#
)#
segments(#
  x0 = c(13, 10),#
  y0 = c(2, 1),#
  x1 = c(13, 10),#
  y1 = c(3, 1.7)#
)#
segments(#
  x0 = c(11.5, 16.5),#
  y0 = c(1, 1),#
  x1 = c(13.5, 17.5),#
  y1 = c(1, 1),#
  col = "#b78135"#
)#
mtext(#
  side = 3, #
  at= 13, #
  text = bquote(italic(M) == .(mean(sample)))#
)#
arrows(#
  x0 = c(13, 13),#
  y0 = c(2.5, 2.5),#
  x1 = c(14.5, 11.5),#
  y1 = c(2.5, 2.5),#
  length = 0.1#
)#
text(#
  x = 12, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 14, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 10, #
  y = 1.8, #
  label = bquote(italic(mu) == 10), #
  adj = 0.5#
)
par(mfrow = c(1, 2))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 2))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot(NULL, NULL)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
frame()#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?frame
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
text(x=100, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
text(x=0, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, fill="red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, col="red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, col="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 1000, col="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 1000, col="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 90, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1.1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
text(x = 0.5, y = 0.5, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?text
?text
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?text
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.1, 0.5, 0.1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.1, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.5, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0), mar = 0)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0), mar = rep(0, 4))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = rep(0, 4))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = rep(0, 4))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(1, 0, 1, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 0, 3, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 1, 4, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 1, 4, 1))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
acqr::Plot_Population_Density
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.34, 0.5)#
arrows(0.64, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.33, 0.5)#
arrows(0.67, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.33, 0.5)#
arrows(0.67, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 1.8, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
