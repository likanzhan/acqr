pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "/n"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp()
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ /n ~ "XX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "/nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "\nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2) ~ "\nXX"))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(atop(italic(alpha / 2) == .(alpha / 2), "XX")))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(atop(italic(alpha / 2) == .(alpha / 2), italic(z) == .(z_value))))#
  tvalue <- formatC(t_value, digits = 3, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = - z_value, y = maxy / 4.5, adj = -0.03, pos = 2, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, adj = -0.03, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(, critical=T)
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red",#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", adj = 0,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = 0, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4, adj=0,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, pos = 4, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = "red")#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = "red")#
 legend("top", lty = c(1, 1),  col = c("blue", "red"), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = "blue", lty = 2)#
  abline(v = c(t_value, -t_value), col = "red", lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, pos = 4, col = "blue",#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, col = "red", pos=4,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp(n=1000, critical=T)
pp(n=30, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = col2alpha(plot_colors[c(1, 3)]), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=30, critical=T)
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = "blue", type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[1], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[1]), type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = col2alpha(plot_colors[3]), type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
library(ggsci)
install.package("ggsci")
install.packages("ggsci")
librarh(ggsci)
library(ggsci)
help(,ggsci)
scale_color_npg()
scale_color_npg(1:3)
scale_color_npg(3)
scale_color_npg()
show_col(pal_aaas("default")(10))
library("scales")
show_col(pal_aaas("default")(10))
show_col(pal_aaas("default")(10)[1,3])
show_col(pal_aaas("default")(10)[1])
show_col(pal_aaas("default")(10)[3])
show_col(pal_aaas("default")(10)[2])
pal_aaas("default")(10)[2]
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[2], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
rm(list=ls())
ls()
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[2], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
 plot_colors <- c("#008744", "#0057e7", "#d62d20", "#ffa700") # google    #
 col2alpha <- function(col, alpha) {#
    col_rgb <- col2rgb(col) / 255#
    rgb(col_rgb[1], col_rgb[2], col_rgb[3], alpha = alpha)#
  }#
#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = pal_aaas("default")(10)[4], type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = col2alpha(plot_colors[1]))#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = col2alpha(plot_colors[1]))#
 legend("top", lty = c(1, 1),  col = c(col2alpha(plot_colors[1]), col2alpha(plot_colors[3])), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = col2alpha(plot_colors[3]), lty = 2)#
  abline(v = c(t_value, -t_value), col = col2alpha(plot_colors[1]), lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = col2alpha(plot_colors[3]),#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = col2alpha(plot_colors[1]),#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
show_col(pal_aaas("default")(10))
show_col(pal_aaas("default")(10)[2])
show_col(pal_aaas("default")(10)[3])
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5, #
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5, col = tcolor,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = -0.03, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.1, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp(n=10, critical=T)
pp(n=100, critical=T)
pp(n=1000, critical=T)
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4.6, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=1000, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=10, critical=T)
pp(n=8, critical=T)
pp(n=4, critical=T)
pp(n=2, critical=T)
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = 0, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 4, adj = -0.01, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 5, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy, adj = -0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=3, critical=T)
pp(n=100, critical=T)
pp <- function(#
# Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
critical = FALSE#
){#
z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
  abline(v = c(t_value, -t_value), col = tcolor, lty = 2)#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
pp(n=100, critical=T)
pp(n=2, critical=T)
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 2, labels = bquote(n == .(n)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution(n=2, two_tails = F, critical=T)
Plot_t_Distribution(n=3, two_tails = F, critical=T)
Plot_t_Distribution(n=2, two_tails = F, critical=T)
mu <- 10#
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)#
n <- length(sample)#
hist(#
   x = sample, #
   breaks = 7.5:17.5, #
   axes = FALSE, #
   xlim = c(7, 18), #
   ylim = c(0, 3),#
   xaxs = "i",#
   yaxs = "i",#
   main = "",#
   col = "#f7cda1",#
   lwd = 2,#
   border = "#b78135",#
   xlab = "Time spent looking at the attractive face (in seconds)",#
   ylab = "Number of kids",#
   font.lab = 2#
)#
axis(#
   side = 2,#
   at = 0:2#
)#
axis(#
  side = 1,#
  at = 7:18#
)#
segments(#
  x0 = c(13, 10),#
  y0 = c(2, 1),#
  x1 = c(13, 10),#
  y1 = c(3, 1.7)#
)#
segments(#
  x0 = c(11.5, 16.5),#
  y0 = c(1, 1),#
  x1 = c(13.5, 17.5),#
  y1 = c(1, 1),#
  col = "#b78135"#
)#
mtext(#
  side = 3, #
  at= 13, #
  text = bquote(italic(M) == .(mean(sample)))#
)#
arrows(#
  x0 = c(13, 13),#
  y0 = c(2.5, 2.5),#
  x1 = c(14.5, 11.5),#
  y1 = c(2.5, 2.5),#
  length = c(0.1, 0.1)#
)#
text(#
  x = 12, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 14, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 10, #
  y = 1.8, #
  label = bquote(italic(mu) == 10), #
  adj = 0.5#
)
mu <- 10#
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)#
n <- length(sample)#
hist(#
   x = sample, #
   breaks = 7.5:17.5, #
   axes = FALSE, #
   xlim = c(7, 18), #
   ylim = c(0, 3),#
   xaxs = "i",#
   yaxs = "i",#
   main = "",#
   col = "#f7cda1",#
   lwd = 2,#
   border = "#b78135",#
   xlab = "Time spent looking at the attractive face (in seconds)",#
   ylab = "Number of kids",#
   font.lab = 2#
)#
axis(#
   side = 2,#
   at = 0:2#
)#
axis(#
  side = 1,#
  at = 7:18#
)#
segments(#
  x0 = c(13, 10),#
  y0 = c(2, 1),#
  x1 = c(13, 10),#
  y1 = c(3, 1.7)#
)#
segments(#
  x0 = c(11.5, 16.5),#
  y0 = c(1, 1),#
  x1 = c(13.5, 17.5),#
  y1 = c(1, 1),#
  col = "#b78135"#
)#
mtext(#
  side = 3, #
  at= 13, #
  text = bquote(italic(M) == .(mean(sample)))#
)#
arrows(#
  x0 = c(13, 13),#
  y0 = c(2.5, 2.5),#
  x1 = c(14.5, 11.5),#
  y1 = c(2.5, 2.5),#
  length = 0.1#
)#
text(#
  x = 12, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 14, #
  y = 2.6,#
  label = bquote(s == .(sd(sample)))#
)#
text(#
  x = 10, #
  y = 1.8, #
  label = bquote(italic(mu) == 10), #
  adj = 0.5#
)
par(mfrow = c(1, 2))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot(NULL, NULL)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
frame()#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?frame
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
text(x=100, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
text(x=0, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, fill="red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, col="red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 100, col="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 1000, col="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 100, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 90, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1000, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1.1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border="blue")#
text(x = 0.5, y = 0.5, label = "XX")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?text
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 5)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
?text
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
# rect(0, 0, 1, 1, border = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0, 0, 1, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "Treatment", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 3, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.1, 0.5, 0.1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.1, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-0.5, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.4, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0), mar = 0)#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(0, 0, 0, 0), mar = rep(0, 4))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = rep(0, 4))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(1, 0, 1, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 0, 3, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 1, 4, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), mar = c(2, 1, 4, 1))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
acqr::Plot_Population_Density
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.4, 0, 0.6, 1, col = "blue")#
arrows(-1, 0.5, 0.39, 0.5)#
arrows(0.61, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.34, 0.5)#
arrows(0.64, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.33, 0.5)#
arrows(0.67, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 2, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
par(mfrow = c(1, 3), oma = c(2, 0, 2, 0))#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
mtext("Known population before treatment", side = 3, line = 1)#
mtext(bquote(mu == 80), side = 1, line = 0.5)#
abline(v=80)#
plot.new()#
rect(0.35, 0, 0.65, 1, col = "#EEB8A2")#
arrows(-1, 0.5, 0.33, 0.5)#
arrows(0.67, 0.5, 1, 0.5)#
text(x = 0.5, y = 0.5, label = "T\nr\ne\na\nt\nm\ne\nn\nt", cex = 1.8, bg = "red")#
acqr::Plot_Population_Density(m0 = 80, m1 = 80, sigma = 20, alternative_hypothesis = F, fill = F, decision = F, AX = F, AZ = F, show_sigma = F)#
abline(v=80)#
mtext("Unknown population after treatment ", side = 3, line = 1)#
mtext(bquote(mu == "?"), side = 1, line = 0.5)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, col = fill, border = border,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(sigma==~.(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency()
sample <- c(8, 10, 12, 12, 13, 13, 15, 17, 17)
Plot_Sample_Frequency(sample)
Plot_Sample_Frequency(sample, main = "")
Plot_Sample_Frequency(sample, main = "", xlab = "")
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(sigma==~.(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, main = "", xlab = "")
Plot_Sample_Frequency(sample)
Plot_Sample_Frequency(sample, show_sample_deviation=T)
Plot_Sample_Frequency(sample, show_sample_deviation=T, populqtion_meqn = 10)
Plot_Sample_Frequency(sample, show_sample_deviation=T, populqtion_mean = 10)
Plot_Sample_Frequency(sample, show_sample_deviation=T, population_mean = 10)
Plot_Sample_Frequency(sample, show_sample_deviation=T, population_mean = 9)
Plot_Sample_Frequency(sample, show_sample_deviation=T, population_mean = 9, AHZ=T)
Plot_Sample_Frequency(sample, population_mean = 9)
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T)
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 2, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 2, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2], label = bquote(s == .(round(sd(data), 2))), pos = 1)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    abline(v= mean(data) + sd(data), lty = 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]
Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))
data <- sample
Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))
segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]
segment_y0
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq))#
#    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq)+2)#
#    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 30)#
#    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 30)#
#    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 0)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
#    abline(v = mean(data), lty=2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 0)#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sd = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sd) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))))#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
?axis
plot(1:4, rnorm(4), axes = FALSE)
plot(1:4, rnorm(4))
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sd=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = "",#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))))#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sigma=T, AVD=F)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135", xlab = "",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", #
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))))#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sigma=T, AVD=F, xlab = "XXX")
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135", xlab = "",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))))#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sigma=T, AVD=F, xlab = "XXX")
Plot_Sample_Frequency(sample, population_mean = 9, show_sample_sigma=T, AVD=F, xlab = "XXX", AHZ=T)
Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "XXX", AHZ=T)
Plot_Sample_Frequency <- function(#
data,#
show_sample_deviation = FALSE,#
show_sample_grid = TRUE,#
show_sample_sigma = FALSE,#
AHZ = FALSE, AVD = TRUE,#
show_population_curve = FALSE,#
population_mean = mean(data),#
population_sd = sd(data),#
fill = "#fce6bf", border = "#b78135", #
xlab = "", ylab = "Frequency",#
...#
){#
  ##### 1. Calculate the required value #######
  Table <- as.data.frame(table(data))#
  Table[, "data"] <- as.numeric(as.character(Table[, "data"]))#
  value <- Table[, "data"]#
  freq <- Table[, "Freq"]#
  width <- min(value[-1] - value[-length(value)])#
  xlim <- c(min(value) -  width, max(value) + width)#
  ylim <- c(0,  max(table(data)) + 1)#
  breaks <- seq(min(value) - width / 2, max(value) + width / 2, by = width)#
  xlabel <- round(seq(min(value), max(value), by = width), 2)#
  xzlabel <- round((xlabel - population_mean) / population_sd, 2)#
  ylabel <- seq(0, max(table(data)), by = 1)#
  ydensitylabel <- format(ylabel / length(data), digits = 2)#
#
  ##### 2. Do the plotting #######
  par(mar = c(5, 4, 4, 5) + 0.1)#
  hist(data, ylim = ylim, xlim = xlim, breaks = breaks, #
    col = fill, border = border, main = "", xlab = xlab, ylab = ylab,#
    yaxs = "i", xaxs = "i", xaxt = "n", yaxt = "n", ...)#
  mtext(expression(italic("X")), side = 1, line = 0, adj = 0.99)#
  axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0)#
  axis(1, at = xlabel, labels = xlabel, lwd = 0, lwd.ticks = 1, padj = -0.5)#
  axis(2, at = ylim, labels = c("",""), lwd.ticks = 0)#
  axis(2, at = ylabel, labels = ylabel, lwd = 0, lwd.ticks = 1, las = 1)#
#
  ##### 3. Add more axes #######
  if (AVD){#
    axis(4, at = ylim, labels = c("",""), lwd.ticks = 0)#
    axis(4, at = ylabel, labels = ydensitylabel, lwd = 0, lwd.ticks = 1, las = 1)#
    mtext("Density", side = 4, line = 4, padj = - 1)#
  }#
#
  if (AHZ) {#
    axis(1, at = xlim, labels = c("", ""), lwd.ticks = 0, line = 2.5)#
    axis(1, at = xlabel, labels = xzlabel, lwd = 0, lwd.ticks = 1, line = 2.5, padj = -0.5)#
    mtext(expression(italic("z")), side = 1, line = 2.5, adj = 0.99)#
  }#
#
  ##### 4. Add more information concerning the sample data #######
  if (show_sample_grid){#
    invisible(lapply(1:nrow(Table), function(i) {#
    invisible(lapply(1:freq[i], function(j){#
      segments(value[i]  - width / 2, 1:j, value[i]  + width / 2, 1:j, col = border)#
              }))#
      }))#
    }#
#
  if (show_sample_sigma) {#
  	segment_y0 <- Table[Table[, "data"] == round(mean(data), 0), "Freq"]#
  	segments(x0 = mean(data), y0 = segment_y0, x1 = mean(data), y1 = max(freq) + 2)#
    arrows(mean(data)- sd(data), ylim[2]-0.5, mean(data) + sd(data), ylim[2] - 0.5, code = 3, length = 0.1)#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))))#
    text(x = mean(data) + sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
    text(x = mean(data) - sd(data) / 2, y = ylim[2] - 0.5, label = bquote(s == .(round(sd(data), 2))), pos = 3)#
  }#
#
  if (show_sample_deviation) {#
    sdata <- data[data != population_mean]#
    unique <- unique(sdata)#
    length <- length(unique)#
    segments(#
      x0 = unique, y0 = as.numeric(table(sdata)),#
      x1 = unique, y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length))#
    segments(#
      x0 = population_mean, y0 = length(data[data == population_mean]), x1 = population_mean, y1 = max(table(sdata)) + 1 )#
    segments(#
      x0 = unique, y0 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
      x1 = rep(population_mean, length), y1 = seq(max(table(sdata)) + 0.1 , max(table(sdata)) + 0.9, length.out = length),#
         col = "red")#
    mtext(side = 3, at = population_mean, text = bquote(italic(mu[0]) == .(population_mean)))	#
    mtext(side = 3, at = mean(data), text = bquote(italic(M) == .(round(mean(data), 2))), line = 1)#
  }#
#
  ##### 5. Add population curve #######
  if (show_population_curve){#
    zx <- seq(population_mean - 3 * population_sd, population_mean + 3 * population_sd, len = 100)#
    zy <- dnorm(zx, mean = population_mean, sd = population_sd) * length(data)#
    lines(zx, zy, col = "#cf232a", lwd = 2)#
  }#
#
}
Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "XXX", AHZ=T, ylab ="YY")
Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "XXX", AHZ=T, ylab ="YY", font.lab2)
Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "XXX", AHZ=T, ylab ="YY", font.lab = 2)
acqr::Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "Time spent looking at the attractive face (in seconds)", ylab ="Number of kids", font.lab = 2)
acqr::Plot_Sample_Frequency(sample, show_sample_sigma=T, AVD=F, xlab = "Time spent looking at the attractive face (in seconds)", ylab ="Number of kids", font.lab = 2)
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 1.5, labels = bquote(n == .(n)), col = tcolor)#
 text( x = 0, y = maxy / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution()
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 1.7, labels = bquote(n == .(n)), col = tcolor)#
 text( x = 0, y = maxy / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution()
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 1.8, labels = bquote(n == .(n)), col = tcolor)#
 text( x = 0, y = maxy / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution()
Plot_t_Distribution <- function (#
n = 3,#
alpha = 0.05,#
two_tails = TRUE,#
critical = FALSE#
){#
if (two_tails) {#
 z_value <- qnorm(p = alpha / 2, lower.tail = FALSE)	#
 t_value <- qt(p = alpha / 2, df = n - 1, lower.tail = FALSE)	#
} else {#
 z_value <- qnorm(p = alpha, lower.tail = FALSE)	#
 t_value <- qt(p = alpha, df = n - 1, lower.tail = FALSE)		#
}#
xx <- seq(-6, 6, by = 0.01)#
zy <- dnorm(xx)#
ty <- dt(xx, n - 1)#
maxy <- max(c(zy, ty))#
zcolor <- ggsci::pal_aaas("default")(10)[2]#
tcolor <- ggsci::pal_aaas("default")(10)[3]#
plot(x = xx, y = zy, ylim = c(0, 1.2 * maxy), #
     col = zcolor, type = "l",#
     xlab = "z/t value", ylab = "density",#
     bty = "l", yaxs = "i"#
 )#
 lines(xx, ty, col = ggsci::pal_aaas("default")(10)[3])#
 text( x = 0, y = maxy / 1.75, labels = bquote(n == .(n)), col = tcolor)#
 text( x = 0, y = maxy / 2, labels = bquote(df == .(n - 1)), col = tcolor)#
 legend("top", lty = c(1, 1),  col = c(zcolor, tcolor), bty = "n",#
   legend = c("unit normal distribution", "t distribution")#
 )#
 if (critical) {#
  if (two_tails){#
    abline(v = c(z_value, -z_value), col = zcolor, lty = 2)#
    abline(v = c(t_value, -t_value), col = tcolor, lty = 2)	#
  } else {#
    abline(v = z_value, col = zcolor, lty = 2)#
    abline(v = t_value, col = tcolor, lty = 2)	  	#
  }#
  text(x = 0, y = maxy / 2.5,#
    labels = bquote(italic(alpha / 2) == .(alpha / 2)))#
  zvalue <- formatC(z_value, digits = 6, format ="f")#
  text(x = z_value,y = maxy / 4, adj = - 0.05, col = zcolor,#
    labels = bquote(italic(z) == .(zvalue)))#
  tvalue <- formatC(t_value, digits = 6, format ="f")#
  text(x = t_value, y = maxy / 1, adj = - 0.05, col = tcolor,#
    labels = bquote(italic(t) == .(tvalue))#
    )	#
  }#
}
Plot_t_Distribution()
Plot_t_Distribution()
library(printr)
library(broom)
